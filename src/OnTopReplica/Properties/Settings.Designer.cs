//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnTopReplica.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.9.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::OnTopReplica.StoredRegionArray SavedRegions {
            get {
                return ((global::OnTopReplica.StoredRegionArray)(this["SavedRegions"]));
            }
            set {
                this["SavedRegions"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("255")]
        public byte Opacity {
            get {
                return ((byte)(this["Opacity"]));
            }
            set {
                this["Opacity"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("(Default)")]
        public global::System.Globalization.CultureInfo Language {
            get {
                return ((global::System.Globalization.CultureInfo)(this["Language"]));
            }
            set {
                this["Language"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool MustUpdate {
            get {
                return ((bool)(this["MustUpdate"]));
            }
            set {
                this["MustUpdate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ClickThrough {
            get {
                return ((bool)(this["ClickThrough"]));
            }
            set {
                this["ClickThrough"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool FirstTimeClickThrough {
            get {
                return ((bool)(this["FirstTimeClickThrough"]));
            }
            set {
                this["FirstTimeClickThrough"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool FirstTimeClickForwarding {
            get {
                return ((bool)(this["FirstTimeClickForwarding"]));
            }
            set {
                this["FirstTimeClickForwarding"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool FullscreenAlwaysOnTop {
            get {
                return ((bool)(this["FullscreenAlwaysOnTop"]));
            }
            set {
                this["FullscreenAlwaysOnTop"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool RestoreSizeAndPosition {
            get {
                return ((bool)(this["RestoreSizeAndPosition"]));
            }
            set {
                this["RestoreSizeAndPosition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Size RestoreLastSize {
            get {
                return ((global::System.Drawing.Size)(this["RestoreLastSize"]));
            }
            set {
                this["RestoreLastSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Point RestoreLastPosition {
            get {
                return ((global::System.Drawing.Point)(this["RestoreLastPosition"]));
            }
            set {
                this["RestoreLastPosition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool RestoreLastWindow {
            get {
                return ((bool)(this["RestoreLastWindow"]));
            }
            set {
                this["RestoreLastWindow"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RestoreLastWindowClass {
            get {
                return ((string)(this["RestoreLastWindowClass"]));
            }
            set {
                this["RestoreLastWindowClass"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string RestoreLastWindowTitle {
            get {
                return ((string)(this["RestoreLastWindowTitle"]));
            }
            set {
                this["RestoreLastWindowTitle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public long RestoreLastWindowHwnd {
            get {
                return ((long)(this["RestoreLastWindowHwnd"]));
            }
            set {
                this["RestoreLastWindowHwnd"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+C")]
        public string HotKeyCloneCurrent {
            get {
                return ((string)(this["HotKeyCloneCurrent"]));
            }
            set {
                this["HotKeyCloneCurrent"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+O")]
        public string HotKeyShowHide {
            get {
                return ((string)(this["HotKeyShowHide"]));
            }
            set {
                this["HotKeyShowHide"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Standard")]
        public string FullscreenMode {
            get {
                return ((string)(this["FullscreenMode"]));
            }
            set {
                this["FullscreenMode"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool RestoreLastShowChrome {
            get {
                return ((bool)(this["RestoreLastShowChrome"]));
            }
            set {
                this["RestoreLastShowChrome"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+F1")]
        public string HotKeyOpacity100 {
            get {
                return ((string)(this["HotKeyOpacity100"]));
            }
            set {
                this["HotKeyOpacity100"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+F2")]
        public string HotKeyOpacity80 {
            get {
                return ((string)(this["HotKeyOpacity80"]));
            }
            set {
                this["HotKeyOpacity80"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+F3")]
        public string HotKeyOpacity60 {
            get {
                return ((string)(this["HotKeyOpacity60"]));
            }
            set {
                this["HotKeyOpacity60"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+F4")]
        public string HotKeyOpacity40 {
            get {
                return ((string)(this["HotKeyOpacity40"]));
            }
            set {
                this["HotKeyOpacity40"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+F5")]
        public string HotKeyOpacity20 {
            get {
                return ((string)(this["HotKeyOpacity20"]));
            }
            set {
                this["HotKeyOpacity20"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[CTRL]+[SHIFT]+F12")]
        public string HotKeyClickThrough {
            get {
                return ((string)(this["HotKeyClickThrough"]));
            }
            set {
                this["HotKeyClickThrough"] = value;
            }
        }
    }
}
